{"version":3,"sources":["webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/capitalize.js","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///../OTKit/otkit-typography-desktop/token.common.js","webpack:///./node_modules/lodash/_baseSlice.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./src/styles/otkit-typography-desktop.module.scss","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./node_modules/lodash/_hasUnicode.js","webpack:///./node_modules/lodash/camelCase.js","webpack:///./src/components/design-system-partials/otkit-typography.js","webpack:///./src/pages/otkit/typography.js","webpack:///./node_modules/lodash/_castSlice.js"],"names":["rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","join","rsSymbol","reUnicode","RegExp","module","exports","string","match","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","undefined","chr","charAt","trailing","slice","upperFirst","toLowerCase","asciiToArray","unicodeToArray","xxlargeBoldFontWeight","largeBoldFontWeight","xlargeBoldFontSize","fontFamilyJa","xlargeBoldLineHeight","fontFamily","smallMediumFontWeight","xsmallMediumFontSize","xsmallMediumLineHeight","mediumBoldFontWeight","xxxsmallRegularFontWeight","xsmallRegularFontWeight","smallRegularFontSize","xxsmallRegularFontSize","xxlargeBoldFontSize","largeBoldFontSize","smallRegularLineHeight","xxsmallRegularLineHeight","xxlargeBoldLineHeight","largeBoldLineHeight","xsmallBoldFontWeight","fontWeightMedium","smallMediumFontSize","smallMediumLineHeight","mediumBoldFontSize","mediumBoldLineHeight","xxxsmallRegularFontSize","xsmallRegularFontSize","largeMediumFontWeight","xxxsmallRegularLineHeight","xsmallRegularLineHeight","smallBoldFontWeight","xsmallBoldFontSize","xsmallBoldLineHeight","fontFamilyBrandAlt","xlargeBoldFontWeight","largeMediumFontSize","largeMediumLineHeight","fontWeightBold","fontFamilyBrand","xsmallMediumFontWeight","smallBoldFontSize","fontWeightNormal","smallBoldLineHeight","xxsmallRegularFontWeight","smallRegularFontWeight","array","start","end","index","length","result","Array","split","createCaseFirst","reHasUnicode","test","capitalize","camelCase","createCompounder","word","typographyGroups","TypographyDesktop","groups","map","group","fontSize","token","fontWeight","lineHeight","divStyle","className","styles","fontItem","style","key","mainContainer","text","type","href","fontColumn","withLayout","baseSlice"],"mappings":"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","file":"component---src-pages-otkit-typography-js-bcad44502802819f72ac.js","sourcesContent":["/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","module.exports = {\n  xxlargeBoldFontWeight: \"bold\",\n  largeBoldFontWeight: \"bold\",\n  xlargeBoldFontSize: \"32px\",\n  fontFamilyJa: \"'BrandonText', 'Helvetica Neue', Helvetica, Arial, OpenTableHiragino, Roboto, Droid Sans, '游ゴシック体', OpenTableYuGothic, YuGothic, Yu Gothic, 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif\",\n  xlargeBoldLineHeight: \"36px\",\n  fontFamily: \"'BrandonText', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\",\n  smallMediumFontWeight: \"500\",\n  xsmallMediumFontSize: \"14px\",\n  xsmallMediumLineHeight: \"20px\",\n  mediumBoldFontWeight: \"bold\",\n  xxxsmallRegularFontWeight: \"normal\",\n  xsmallRegularFontWeight: \"normal\",\n  smallRegularFontSize: \"16px\",\n  xxsmallRegularFontSize: \"12px\",\n  xxlargeBoldFontSize: \"48px\",\n  largeBoldFontSize: \"24px\",\n  smallRegularLineHeight: \"24px\",\n  xxsmallRegularLineHeight: \"16px\",\n  xxlargeBoldLineHeight: \"56px\",\n  largeBoldLineHeight: \"28px\",\n  xsmallBoldFontWeight: \"bold\",\n  fontWeightMedium: \"500\",\n  smallMediumFontSize: \"16px\",\n  smallMediumLineHeight: \"24px\",\n  mediumBoldFontSize: \"18px\",\n  mediumBoldLineHeight: \"24px\",\n  xxxsmallRegularFontSize: \"10px\",\n  xsmallRegularFontSize: \"14px\",\n  largeMediumFontWeight: \"500\",\n  xxxsmallRegularLineHeight: \"12px\",\n  xsmallRegularLineHeight: \"20px\",\n  smallBoldFontWeight: \"bold\",\n  xsmallBoldFontSize: \"14px\",\n  xsmallBoldLineHeight: \"20px\",\n  fontFamilyBrandAlt: \"BrandonText\",\n  xlargeBoldFontWeight: \"bold\",\n  largeMediumFontSize: \"24px\",\n  largeMediumLineHeight: \"32px\",\n  fontWeightBold: \"bold\",\n  fontFamilyBrand: \"BrandonText\",\n  xsmallMediumFontWeight: \"500\",\n  smallBoldFontSize: \"16px\",\n  fontWeightNormal: \"normal\",\n  smallBoldLineHeight: \"24px\",\n  xxsmallRegularFontWeight: \"normal\",\n  smallRegularFontWeight: \"normal\",\n};","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fontItem\":\"otkit-typography-desktop-module--font-item--W_aj9\",\"mainContainer\":\"otkit-typography-desktop-module--main-container--20br3\"};","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var capitalize = require('./capitalize'),\n    createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function(result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\nmodule.exports = camelCase;\n","import React from 'react';\nimport _ from 'lodash';\nimport token from 'otkit-typography-desktop/token.common';\n\nimport SectionHeader from '../section-header';\nimport styles from '../../styles/otkit-typography-desktop.module.scss';\n\nconst typographyGroups = [\n  'xxlarge-bold',\n  'xlarge-bold',\n  'large-bold',\n  'large-medium',\n  'medium-bold',\n  'small-bold',\n  'small-medium',\n  'small-regular',\n  'xsmall-bold',\n  'xsmall-medium',\n  'xsmall-regular'\n];\n\nconst TypographyDesktop = () => {\n  const groups = typographyGroups.map((group, index) => {\n    const fontSize = token[_.camelCase(`${group}-font-size`)];\n    const fontWeight = token[_.camelCase(`${group}-font-weight`)];\n    const lineHeight = token[_.camelCase(`${group}-line-height`)];\n    const divStyle = { fontSize, fontWeight, lineHeight };\n\n    return (\n      <div className={styles.fontItem} style={divStyle} key={index}>\n        {group} | font-size: {fontSize} | font-weight: {fontWeight} |\n        line-height: {lineHeight}\n      </div>\n    );\n  });\n\n  return (\n    <div className={styles.mainContainer}>\n      <SectionHeader text=\"Typography – Desktop\" type=\"SectionHeader__small\" />\n      <p>\n        To use these OTKit typography rules in your project, we have a\n        production-tested package that exports readily made font groupings for\n        you:{' '}\n        <a href=\"https://github.com/opentable/ot-react-ui-components/tree/master/styles/typography-desktop\">\n          @ot-react-ui/typography-desktop.\n        </a>{' '}\n        See its README for details.\n      </p>\n      <p>\n        It is generally <em>not recommended</em> to directly consume / reference\n        the values in this token unless for explicit reasons, such as\n        overriding.\n      </p>\n      <div className={styles.fontColumn}>{groups}</div>\n    </div>\n  );\n};\n\nexport default TypographyDesktop;\n","import React from 'react';\nimport withLayout from '../../hocs/withLayout';\nimport Typography from '../../components/design-system-partials/otkit-typography.js';\n\nexport default withLayout(() => <Typography />, 'design-system-nav');\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n"],"sourceRoot":""}